
concept(C) :- cnamea(C).
concept(C) :- cnamena(C).

% On v√©rifie la grammaire de la logique ALC (sujet I.3)
concept(not(C)) :- concept(C).
concept(or(C1, C2)) :- concept(C1), concept(C2).
concept(and(C1, C2)) :- concept(C1), concept(C2).
concept(all(R, C)) :- rname(R), concept(C).
concept(some(R, C)) :- rname(R), concept(C).



% Pour la Tbox
definitionT(CNA, CNA2) :- cnamena(CNA), concept(CNA2).
verif_Tbox([(CNA, CNA2) | L]) :-
    definitionT(CNA, CNA2),
    verif_Tbox(L).
verif_Tbox([]).

%pour la Abox
verif_AboxI([(I, C) | L]) :-
    inst(I,C),
    verif_AboxI(L).
verif_AboxI([]).

verif_AboxR([(I1, I2, R) | L]) :-
    instR(I1, I2, R),
    verif_AboxR(L).
verif_AboxR([]).



pas_autoref(C, not(C2)) :-
    pas_autoref(C, C2).

pas_autoref(C, and(C1, C2)) :-
    pas_autoref(C, C1), pas_autoref(C, C2).

pas_autoref(C, or(C1, C2)) :-
    pas_autoref(C, C1), pas_autoref(C, C2).

pas_autoref(C, all(X, C2)) :-
    pas_autoref(C, C2).

pas_autoref(C, some(Y, C2)) :-
    pas_autoref(C, C2).

pas_autoref(C, C1) :-
    C \== C1, cnamea(C1); equiv(C1,Z), pas_autoref(C,Z).

pas_autoref(C,Z):-cnamea(Z).




